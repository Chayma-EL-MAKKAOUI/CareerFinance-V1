#!/usr/bin/env python3
"""
Script de test pour le syst√®me d'authentification
"""

import asyncio
import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire backend au PYTHONPATH
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir))

async def test_auth_service():
    """Tester le service d'authentification"""
    try:
        from services.supabase_auth_service import SupabaseAuthService
        print("‚úÖ Service d'authentification import√© avec succ√®s")
        
        # Tester l'initialisation
        auth_service = SupabaseAuthService()
        print("‚úÖ Service d'authentification initialis√© avec succ√®s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test du service d'authentification: {e}")
        return False

async def test_auth_models():
    """Tester les mod√®les d'authentification"""
    try:
        from models.auth_models import UserRegister, UserLogin, AuthResponse
        print("‚úÖ Mod√®les d'authentification import√©s avec succ√®s")
        
        # Tester la cr√©ation d'un mod√®le
        user_data = {
            "email": "test@example.com",
            "username": "testuser",
            "password": "password123",
            "first_name": "Test",
            "last_name": "User"
        }
        
        user_register = UserRegister(**user_data)
        print("‚úÖ Mod√®le UserRegister cr√©√© avec succ√®s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des mod√®les: {e}")
        return False

async def test_auth_dependencies():
    """Tester les d√©pendances d'authentification"""
    try:
        from dependencies.auth_dependencies import get_current_user, require_user
        print("‚úÖ D√©pendances d'authentification import√©es avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des d√©pendances: {e}")
        return False

async def test_auth_router():
    """Tester le router d'authentification"""
    try:
        from routers.auth import router
        print("‚úÖ Router d'authentification import√© avec succ√®s")
        
        # V√©rifier que le router a des routes
        routes = [route for route in router.routes]
        print(f"‚úÖ Router contient {len(routes)} routes")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test du router: {e}")
        return False

async def test_config():
    """Tester la configuration"""
    try:
        from config.auth_config import auth_settings
        print("‚úÖ Configuration d'authentification import√©e avec succ√®s")
        
        # Afficher la configuration (sans les secrets)
        print(f"   - Supabase URL: {'‚úÖ' if auth_settings.SUPABASE_URL else '‚ùå'}")
        print(f"   - JWT Algorithm: {auth_settings.JWT_ALGORITHM}")
        print(f"   - Token Expire: {auth_settings.ACCESS_TOKEN_EXPIRE_MINUTES} minutes")
        print(f"   - OAuth configur√©: {'‚úÖ' if auth_settings.is_oauth_configured else '‚ùå'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de la configuration: {e}")
        return False

async def main():
    """Fonction principale de test"""
    print("üß™ Test du syst√®me d'authentification")
    print("=" * 50)
    
    tests = [
        ("Configuration", test_config),
        ("Mod√®les", test_auth_models),
        ("Service", test_auth_service),
        ("D√©pendances", test_auth_dependencies),
        ("Router", test_auth_router),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüîç Test: {test_name}")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur lors du test {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√©sum√© des tests")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name:15} : {status}")
        if result:
            passed += 1
    
    print(f"\nR√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s avec succ√®s!")
        return 0
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©")
        return 1

if __name__ == "__main__":
    # Charger les variables d'environnement
    from dotenv import load_dotenv
    load_dotenv()
    
    # Ex√©cuter les tests
    exit_code = asyncio.run(main())
    sys.exit(exit_code)

#!/usr/bin/env python3
"""
Script de validation des modifications d'authentification
Ce script v√©rifie que tous les routers ont bien √©t√© modifi√©s pour inclure l'authentification JWT
"""

import os
import re
from typing import List, Dict, Tuple

# Configuration
ROUTERS_DIR = "routers"
AUTH_IMPORT = "from dependencies.auth_dependencies import get_current_user"
AUTH_DEPENDENCY = "current_user: dict = Depends(get_current_user)"

def check_file_for_auth(file_path: str) -> Tuple[bool, List[str]]:
    """V√©rifie si un fichier contient les modifications d'authentification"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        issues = []
        has_auth_import = AUTH_IMPORT in content
        has_auth_dependency = AUTH_DEPENDENCY in content
        
        if not has_auth_import:
            issues.append("‚ùå Import d'authentification manquant")
        
        if not has_auth_dependency:
            issues.append("‚ùå D√©pendance d'authentification manquante")
        
        # V√©rifier les endpoints POST et GET
        post_endpoints = re.findall(r'@router\.post\([^)]+\)\s*\n\s*async def ([^(]+)', content)
        get_endpoints = re.findall(r'@router\.get\([^)]+\)\s*\n\s*async def ([^(]+)', content)
        
        protected_endpoints = []
        for endpoint in post_endpoints + get_endpoints:
            endpoint_name = endpoint.strip()
            if endpoint_name and not endpoint_name.startswith('_'):
                # V√©rifier si cet endpoint a la d√©pendance d'authentification
                endpoint_pattern = rf'async def {re.escape(endpoint_name)}\s*\([^)]*{re.escape(AUTH_DEPENDENCY)}'
                if not re.search(endpoint_pattern, content):
                    protected_endpoints.append(endpoint_name)
        
        if protected_endpoints:
            issues.append(f"‚ö†Ô∏è  Endpoints sans authentification: {', '.join(protected_endpoints)}")
        
        return has_auth_import and has_auth_dependency and not protected_endpoints, issues
        
    except Exception as e:
        return False, [f"‚ùå Erreur de lecture: {str(e)}"]

def main():
    """Fonction principale de validation"""
    print("üîê Validation des modifications d'authentification JWT")
    print("=" * 60)
    
    # Lister tous les fichiers routers
    router_files = []
    for file in os.listdir(ROUTERS_DIR):
        if file.endswith('.py') and file != '__init__.py':
            router_files.append(os.path.join(ROUTERS_DIR, file))
    
    print(f"üìÅ Fichiers routers trouv√©s: {len(router_files)}")
    print()
    
    results = {}
    total_issues = 0
    
    for file_path in router_files:
        file_name = os.path.basename(file_path)
        print(f"üîç V√©rification de {file_name}...")
        
        is_valid, issues = check_file_for_auth(file_path)
        results[file_name] = (is_valid, issues)
        
        if is_valid:
            print(f"  ‚úÖ {file_name} - Authentification configur√©e correctement")
        else:
            print(f"  ‚ùå {file_name} - Probl√®mes d√©tect√©s:")
            for issue in issues:
                print(f"    {issue}")
            total_issues += len(issues)
        
        print()
    
    # R√©sum√©
    print("=" * 60)
    print("üìä R√âSUM√â DE LA VALIDATION")
    print("=" * 60)
    
    valid_files = sum(1 for is_valid, _ in results.values() if is_valid)
    total_files = len(results)
    
    print(f"‚úÖ Fichiers correctement configur√©s: {valid_files}/{total_files}")
    print(f"‚ùå Probl√®mes d√©tect√©s: {total_issues}")
    
    if valid_files == total_files:
        print("\nüéâ Tous les routers sont correctement configur√©s pour l'authentification JWT !")
        print("\nüìã Modifications appliqu√©es:")
        print("   ‚Ä¢ Import de get_current_user ajout√©")
        print("   ‚Ä¢ D√©pendance d'authentification ajout√©e aux endpoints")
        print("   ‚Ä¢ Tous les endpoints m√©tier sont maintenant prot√©g√©s")
        return 0
    else:
        print("\n‚ö†Ô∏è  Certains fichiers n√©cessitent des corrections.")
        print("\nüìù Actions √† effectuer:")
        for file_name, (is_valid, issues) in results.items():
            if not is_valid:
                print(f"   ‚Ä¢ {file_name}: {', '.join(issues)}")
        return 1

if __name__ == "__main__":
    exit(main())

# backend/main_simple.py
from __future__ import annotations

import os
import logging
from contextlib import asynccontextmanager
from typing import AsyncIterator

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from pydantic_settings import BaseSettings, SettingsConfigDict

# â”€â”€ Logging â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("careerfinance")

# â”€â”€ Config â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
class Settings(BaseSettings):
    APP_NAME: str = "CareerFinance AI"
    APP_VERSION: str = "v2"
    ENV: str = "dev"

    # CORS
    CORS_ORIGINS: list[str] = ["http://localhost:3000", "http://127.0.0.1:3000", "*"]
    CORS_CREDENTIALS: bool = True

    model_config = SettingsConfigDict(env_file=".env", env_file_encoding="utf-8", extra="ignore")

settings = Settings()

# â”€â”€ Models â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# ModÃ¨les simplifiÃ©s pour Ã©viter les problÃ¨mes de parsing
# class CareerCoachingRequest(BaseModel):
#     goal: str = "Ã‰voluer vers un poste de management"
#     skills: list[str] = ["JavaScript", "React", "Node.js"]
#     sector: str = "Technologie"
#     useLinkedInData: bool = False

# class CareerCoachingResponse(BaseModel):
#     plan: dict
#     insights: list[str]
#     recommendations: list[str]
#     next_steps: list[str]

# â”€â”€ Lifespan â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncIterator[None]:
    log.info("ðŸš€ DÃ©marrage CareerFinance AI (version simplifiÃ©e)...")
    log.info("âœ… Application dÃ©marrÃ©e")
    yield
    log.info("ðŸ›‘ ArrÃªt de l'application...")

# â”€â”€ App â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan,
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=settings.CORS_CREDENTIALS,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Health/version
@app.get("/api/health")
async def health():
    return {"ok": True, "message": "CareerFinance AI Backend is running"}

@app.get("/api/version")
async def version():
    return {"name": settings.APP_NAME, "version": settings.APP_VERSION, "env": settings.ENV}

# â”€â”€ Routes de base â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
@app.get("/")
async def root():
    return {
        "message": "CareerFinance AI Backend",
        "version": settings.APP_VERSION,
        "docs": "/docs",
        "health": "/api/health"
    }

@app.get("/api/coaching-carriere")
async def coaching_carriere_info():
    return {
        "message": "API Coaching CarriÃ¨re",
        "status": "ready",
        "features": [
            "GÃ©nÃ©ration de plans de carriÃ¨re",
            "Analyse des compÃ©tences",
            "Recherche de profils LinkedIn",
            "Insights sectoriels"
        ],
        "note": "Cette version simplifiÃ©e est prÃªte pour l'intÃ©gration Supabase"
    }

# â”€â”€ Routes RAG (simulÃ©es) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
@app.get("/api/rag/status")
async def rag_status():
    """Statut du systÃ¨me RAG LinkedIn"""
    return {
        "isInitialized": False,
        "profilesCount": 0,
        "status": "not_available",
        "message": "SystÃ¨me RAG LinkedIn non initialisÃ© dans cette version simplifiÃ©e"
    }

# â”€â”€ Routes Documents (simulÃ©es) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
@app.post("/api/documents/upload")
async def upload_documents(request: Request):
    """API d'upload de documents (simulÃ©e)"""
    try:
        # Simulation d'un upload rÃ©ussi
        return {
            "success": True,
            "message": "Document uploadÃ© avec succÃ¨s",
            "filename": "document.pdf",
            "size": "1.2 MB"
        }
    except Exception as e:
        log.error(f"Erreur dans l'upload de documents: {e}")
        return {
            "success": False,
            "message": "Erreur lors de l'upload",
            "error": str(e)
        }

# â”€â”€ Routes Coaching (simulÃ©es) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
@app.post("/api/coaching/coaching")
async def coaching_carriere(request: Request):
    """API de coaching carriÃ¨re simplifiÃ©e"""
    try:
        body = await request.json()
        goal = body.get('goal', "Ã‰voluer vers un poste de management")
        skills = body.get('skills', ["JavaScript", "React", "Node.js"])
        sector = body.get('sector', "Technologie")

        # Structure attendue par le frontend (CareerCoachingResult)
        response_payload = {
            "objectif": goal,
            "competences": skills,
            "secteur": sector,
            "planCarriere": {
                "etapes": [
                    {
                        "titre": "Bilan des compÃ©tences",
                        "duree": "2 semaines",
                        "description": "Cartographier vos compÃ©tences actuelles et celles Ã  dÃ©velopper en prioritÃ©.",
                        "competencesRequises": skills[:2] + ["Communication"],
                        "salaireEstime": 0,
                    },
                    {
                        "titre": "Formation ciblÃ©e",
                        "duree": "1-2 mois",
                        "description": "Suivre 2 formations certifiantes alignÃ©es avec l'objectif.",
                        "competencesRequises": skills + ["Gestion de projet"],
                        "salaireEstime": 0,
                    },
                    {
                        "titre": "Projet portfolio",
                        "duree": "1 mois",
                        "description": "RÃ©aliser un projet concret dÃ©montrant l'objectif: %s." % goal,
                        "competencesRequises": skills,
                        "salaireEstime": 0,
                    },
                    {
                        "titre": "Networking & candidatures",
                        "duree": "3-4 semaines",
                        "description": "Optimiser CV/LinkedIn, activer le rÃ©seau et postuler.",
                        "competencesRequises": ["Personal Branding", "Networking"],
                        "salaireEstime": 0,
                    },
                ]
            },
            "scriptNegociation": {
                "points": [
                    "Mise en avant de l'impact mesurable des projets",
                    "Alignement des compÃ©tences avec les besoins du poste",
                    "MobilitÃ© et progression"
                ],
                "arguments": [
                    "ExpÃ©rience sur %s" % (", ".join(skills[:2]) or "les technologies clÃ©s"),
                    "RÃ©sultats tangibles obtenus",
                    "Veille continue et certifications"
                ],
                "conseils": [
                    "PrÃ©parer 3 exemples STAR",
                    "Ancrer une fourchette salariale rÃ©aliste",
                    "Proposer un plan d'onboarding de 30 jours"
                ]
            },
            "formationsRecommandees": [
                {"titre": "Certification %s" % (skills[0] if skills else "Core"), "duree": "2-4 semaines", "priorite": "high", "description": "Certification reconnue pour renforcer la crÃ©dibilitÃ©."},
                {"titre": "Soft skills leadership", "duree": "2 semaines", "priorite": "medium", "description": "Communication, influence, feedback."}
            ],
            "planningFormations": [
                {"mois": "Mois 1", "formation": "Certification technique"},
                {"mois": "Mois 2", "formation": "Projet portfolio"},
                {"mois": "Mois 3", "formation": "PrÃ©paration entretiens"}
            ],
            "objectifsSMART": [
                {"horizon": "30 jours", "objectif": "Finaliser 1 certification", "smart_tags": ["SpÃ©cifique", "Mesurable", "Temporel"]},
                {"horizon": "60 jours", "objectif": "Livrer un projet portfolio", "smart_tags": ["SpÃ©cifique", "Atteignable", "RÃ©aliste"]},
            ],
            "suiviProgres": [
                {"titre": "Certification en cours", "progression": 40},
                {"titre": "DÃ©veloppement leadership", "progression": 20},
                {"titre": "RÃ©seau professionnel", "progression": 10},
            ],
        }

        return response_payload

    except Exception as e:
        log.error(f"Erreur dans le coaching carriÃ¨re: {e}")
        return {
            "error": "Erreur interne du serveur",
            "message": str(e),
        }

@app.post("/api/rag/enhanced-coaching")
async def enhanced_coaching(request: Request):
    """API de coaching enrichi avec RAG (simulÃ©e)"""
    try:
        body = await request.json()
        goal = body.get('goal', "Ã‰voluer vers un poste de management")
        skills = body.get('skills', ["JavaScript", "React", "Node.js"])
        sector = body.get('sector', "Technologie")

        payload = await coaching_carriere(request)  # base structure
        # Ajouter des drapeaux/insights LinkedIn simulÃ©s
        if isinstance(payload, dict):
            payload.update({
                "linkedInDataUsed": True,
                "linkedinInsights": {
                    "profilesAnalyzed": 128,
                    "topSkills": skills[:3],
                    "targetCompanies": ["Company A", "Company B"],
                    "commonTitles": [goal, "Senior " + goal if isinstance(goal, str) else "Senior"],
                    "locations": ["Casablanca", "Rabat"],
                },
                "secteur": sector,
            })
        return payload

    except Exception as e:
        log.error(f"Erreur dans le coaching enrichi: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")

# (optionnel) exÃ©cution directe: uvicorn backend.main_simple:app --reload
if __name__ == "__main__": # pragma: no cover
    import uvicorn
    uvicorn.run("main_simple:app", host="0.0.0.0", port=8000, reload=True)

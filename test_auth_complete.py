#!/usr/bin/env python3
"""
Script de test complet pour l'authentification CareerFinance AI
Teste l'inscription, la connexion, la d√©connexion et la protection des routes
"""

import requests
import json
import time
import sys
from typing import Dict, Any

# Configuration
API_BASE_URL = "http://localhost:8000"
TEST_USER = {
    "email": "test@example.com",
    "username": "testuser",
    "password": "testpassword123",
    "first_name": "Test",
    "last_name": "User",
    "role": "user"
}

def print_status(message: str, status: str = "INFO"):
    """Afficher un message avec un statut color√©"""
    colors = {
        "INFO": "\033[94m",    # Bleu
        "SUCCESS": "\033[92m", # Vert
        "ERROR": "\033[91m",   # Rouge
        "WARNING": "\033[93m", # Jaune
        "RESET": "\033[0m"     # Reset
    }
    print(f"{colors.get(status, colors['INFO'])}[{status}] {message}{colors['RESET']}")

def test_health_check():
    """Tester la sant√© de l'API"""
    print_status("Test de la sant√© de l'API...", "INFO")
    try:
        response = requests.get(f"{API_BASE_URL}/api/health", timeout=5)
        if response.status_code == 200:
            print_status("‚úÖ API en ligne", "SUCCESS")
            return True
        else:
            print_status(f"‚ùå API retourne {response.status_code}", "ERROR")
            return False
    except Exception as e:
        print_status(f"‚ùå Impossible de contacter l'API: {e}", "ERROR")
        return False

def test_auth_health():
    """Tester la sant√© du service d'authentification"""
    print_status("Test du service d'authentification...", "INFO")
    try:
        response = requests.get(f"{API_BASE_URL}/api/auth/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print_status(f"‚úÖ Service d'auth en ligne - Supabase configur√©: {data.get('supabase_configured', False)}", "SUCCESS")
            return data.get('supabase_configured', False)
        else:
            print_status(f"‚ùå Service d'auth retourne {response.status_code}", "ERROR")
            return False
    except Exception as e:
        print_status(f"‚ùå Erreur service d'auth: {e}", "ERROR")
        return False

def test_register():
    """Tester l'inscription d'un utilisateur"""
    print_status("Test de l'inscription...", "INFO")
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/auth/register",
            json=TEST_USER,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        if response.status_code == 201:
            data = response.json()
            if data.get("success"):
                print_status("‚úÖ Inscription r√©ussie", "SUCCESS")
                return data.get("access_token")
            else:
                print_status(f"‚ùå √âchec de l'inscription: {data.get('detail', 'Erreur inconnue')}", "ERROR")
                return None
        else:
            data = response.json()
            if "d√©j√† utilis√©" in data.get("detail", ""):
                print_status("‚ö†Ô∏è Utilisateur d√©j√† inscrit, test de connexion...", "WARNING")
                return test_login()
            else:
                print_status(f"‚ùå Erreur d'inscription: {data.get('detail', 'Erreur inconnue')}", "ERROR")
                return None
    except Exception as e:
        print_status(f"‚ùå Erreur lors de l'inscription: {e}", "ERROR")
        return None

def test_login():
    """Tester la connexion d'un utilisateur"""
    print_status("Test de la connexion...", "INFO")
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/auth/login",
            json={
                "email": TEST_USER["email"],
                "password": TEST_USER["password"]
            },
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get("success"):
                print_status("‚úÖ Connexion r√©ussie", "SUCCESS")
                return data.get("access_token")
            else:
                print_status(f"‚ùå √âchec de la connexion: {data.get('detail', 'Erreur inconnue')}", "ERROR")
                return None
        else:
            data = response.json()
            print_status(f"‚ùå Erreur de connexion: {data.get('detail', 'Erreur inconnue')}", "ERROR")
            return None
    except Exception as e:
        print_status(f"‚ùå Erreur lors de la connexion: {e}", "ERROR")
        return None

def test_protected_route(token: str):
    """Tester l'acc√®s √† une route prot√©g√©e"""
    print_status("Test d'acc√®s √† une route prot√©g√©e...", "INFO")
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/auth/me",
            headers={
                "Authorization": f"Bearer {token}",
                "Content-Type": "application/json"
            },
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            print_status(f"‚úÖ Route prot√©g√©e accessible - Utilisateur: {data.get('first_name')} {data.get('last_name')}", "SUCCESS")
            return True
        else:
            data = response.json()
            print_status(f"‚ùå Erreur route prot√©g√©e: {data.get('detail', 'Erreur inconnue')}", "ERROR")
            return False
    except Exception as e:
        print_status(f"‚ùå Erreur lors du test de route prot√©g√©e: {e}", "ERROR")
        return False

def test_unprotected_route():
    """Tester l'acc√®s √† une route non prot√©g√©e"""
    print_status("Test d'acc√®s √† une route non prot√©g√©e...", "INFO")
    try:
        response = requests.get(f"{API_BASE_URL}/api/health", timeout=5)
        if response.status_code == 200:
            print_status("‚úÖ Route non prot√©g√©e accessible", "SUCCESS")
            return True
        else:
            print_status(f"‚ùå Erreur route non prot√©g√©e: {response.status_code}", "ERROR")
            return False
    except Exception as e:
        print_status(f"‚ùå Erreur lors du test de route non prot√©g√©e: {e}", "ERROR")
        return False

def test_logout(token: str):
    """Tester la d√©connexion"""
    print_status("Test de la d√©connexion...", "INFO")
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/auth/logout",
            headers={
                "Authorization": f"Bearer {token}",
                "Content-Type": "application/json"
            },
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get("success"):
                print_status("‚úÖ D√©connexion r√©ussie", "SUCCESS")
                return True
            else:
                print_status(f"‚ùå √âchec de la d√©connexion: {data.get('detail', 'Erreur inconnue')}", "ERROR")
                return False
        else:
            data = response.json()
            print_status(f"‚ùå Erreur de d√©connexion: {data.get('detail', 'Erreur inconnue')}", "ERROR")
            return False
    except Exception as e:
        print_status(f"‚ùå Erreur lors de la d√©connexion: {e}", "ERROR")
        return False

def test_invalid_token():
    """Tester l'acc√®s avec un token invalide"""
    print_status("Test d'acc√®s avec un token invalide...", "INFO")
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/auth/me",
            headers={
                "Authorization": "Bearer invalid_token",
                "Content-Type": "application/json"
            },
            timeout=10
        )
        
        if response.status_code == 401:
            print_status("‚úÖ Token invalide correctement rejet√©", "SUCCESS")
            return True
        else:
            print_status(f"‚ùå Token invalide non rejet√©: {response.status_code}", "ERROR")
            return False
    except Exception as e:
        print_status(f"‚ùå Erreur lors du test de token invalide: {e}", "ERROR")
        return False

def main():
    """Fonction principale de test"""
    print_status("üöÄ D√©marrage des tests d'authentification CareerFinance AI", "INFO")
    print_status("=" * 60, "INFO")
    
    # Test 1: Sant√© de l'API
    if not test_health_check():
        print_status("‚ùå Arr√™t des tests - API non disponible", "ERROR")
        sys.exit(1)
    
    # Test 2: Sant√© du service d'authentification
    auth_configured = test_auth_health()
    if not auth_configured:
        print_status("‚ö†Ô∏è Supabase non configur√©, certains tests peuvent √©chouer", "WARNING")
    
    # Test 3: Route non prot√©g√©e
    test_unprotected_route()
    
    # Test 4: Inscription/Connexion
    token = test_register()
    if not token:
        print_status("‚ùå Impossible d'obtenir un token, arr√™t des tests", "ERROR")
        sys.exit(1)
    
    # Test 5: Route prot√©g√©e avec token valide
    test_protected_route(token)
    
    # Test 6: Route prot√©g√©e avec token invalide
    test_invalid_token()
    
    # Test 7: D√©connexion
    test_logout(token)
    
    print_status("=" * 60, "INFO")
    print_status("‚úÖ Tous les tests d'authentification termin√©s", "SUCCESS")
    print_status("üéâ L'authentification fonctionne correctement !", "SUCCESS")

if __name__ == "__main__":
    main()

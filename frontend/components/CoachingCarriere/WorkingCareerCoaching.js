'use client';
import React, { useState } from 'react';
import CareerPlan from './CareerPlan';
import NegotiationScript from './NegotiationScript';

const WorkingCareerCoaching = () => {
  const [formData, setFormData] = useState({
    goal: '',
    skills: '',
    sector: ''
  });
  
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);
  const [showCareerPlan, setShowCareerPlan] = useState(false);
  const [showNegotiationScript, setShowNegotiationScript] = useState(false);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const generateCareerPlan = async (e) => {
    e.preventDefault();
    setLoading(true);
    setResult(null);
    setError(null);

    try {
      // Simulation d'une r√©ponse
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setResult({
        message: "Plan de carri√®re g√©n√©r√© avec succ√®s !",
        plan: `Bas√© sur votre objectif "${formData.goal}" et vos comp√©tences "${formData.skills}", voici votre plan de carri√®re personnalis√© :

**Phase 1 (0-6 mois) :**
‚Ä¢ D√©veloppez vos comp√©tences en leadership et gestion de projet
‚Ä¢ Obtenez des certifications pertinentes dans votre domaine
‚Ä¢ Construisez votre r√©seau professionnel

**Phase 2 (6-12 mois) :**
‚Ä¢ Identifiez les opportunit√©s de promotion internes
‚Ä¢ Participez √† des projets transversaux
‚Ä¢ D√©veloppez votre visibilit√© dans l'entreprise

**Phase 3 (12-24 mois) :**
‚Ä¢ Postulez √† des postes de chef de projet
‚Ä¢ N√©gociez votre promotion avec des arguments solides
‚Ä¢ Continuez √† d√©velopper vos comp√©tences techniques et manag√©riales`,
        recommendations: [
          "D√©veloppez vos comp√©tences en leadership",
          "Obtenez des certifications dans votre domaine",
          "Construisez votre r√©seau professionnel",
          "Identifiez les opportunit√©s de promotion",
          "Participez √† des projets transversaux",
          "D√©veloppez votre visibilit√© dans l'entreprise"
        ]
      });
    } catch (error) {
      setError("Erreur lors de la g√©n√©ration du plan");
    } finally {
      setLoading(false);
    }
  };

  const generateNegotiationScript = async (e) => {
    e.preventDefault();
    setLoading(true);
    setResult(null);
    setError(null);

    try {
      // Simulation d'une r√©ponse
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      setResult({
        message: "Script de n√©gociation g√©n√©r√© avec succ√®s !",
        script: `Voici votre script de n√©gociation personnalis√© bas√© sur votre objectif "${formData.goal}" :

**Ouverture :**
"Bonjour [Nom du manager], j'aimerais discuter de mon √©volution professionnelle au sein de l'entreprise."

**Argumentation :**
"Au cours des derniers mois, j'ai d√©velopp√© mes comp√©tences en ${formData.skills} et j'ai contribu√© √† plusieurs projets importants. Je pense √™tre pr√™t √† prendre plus de responsabilit√©s."

**Objectif :**
"Mon objectif est de devenir ${formData.goal} dans les prochains mois. Quelles sont les √©tapes pour y parvenir ?"

**Questions √† poser :**
‚Ä¢ Quels sont les crit√®res pour ce poste ?
‚Ä¢ Y a-t-il des formations ou certifications recommand√©es ?
‚Ä¢ Quand pourrions-nous revoir cette discussion ?

**Conclusion :**
"Je suis motiv√© et pr√™t √† m'investir pour atteindre cet objectif. Pouvez-vous me donner votre retour sur ce plan ?"`,
        recommendations: [
          "Pr√©parez des exemples concrets de vos r√©alisations",
          "Anticipez les objections et pr√©parez vos r√©ponses",
          "Soyez confiant mais humble",
          "√âcoutez activement les retours",
          "Proposez un plan d'action concret",
          "Fixez des √©ch√©ances pour le suivi"
        ]
      });
    } catch (error) {
      setError("Erreur lors de la g√©n√©ration du script");
    } finally {
      setLoading(false);
    }
  };

  const handleSaveCareerPlan = (updatedPlan) => {
    setResult(prev => ({
      ...prev,
      plan: updatedPlan
    }));
  };

  const handleSaveNegotiationScript = (updatedScript) => {
    setResult(prev => ({
      ...prev,
      script: updatedScript
    }));
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6 p-6">
      <div className="text-center">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          üéØ Coaching Carri√®re
        </h1>
        <p className="text-gray-600">
          G√©n√©rez votre plan de carri√®re personnalis√© et vos scripts de n√©gociation
        </p>
      </div>

      {/* Formulaire */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h2 className="text-xl font-semibold mb-4">Vos informations</h2>
        <form className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Objectif professionnel *
            </label>
            <textarea 
              name="goal"
              value={formData.goal}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows="3"
              placeholder="Ex: Devenir chef de projet"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Comp√©tences cl√©s actuelles (s√©par√©es par des virgules)
            </label>
            <input 
              type="text" 
              name="skills"
              value={formData.skills}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Ex: Python, React, Gestion de projet"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Secteur d'activit√©
            </label>
            <select
              name="sector"
              value={formData.sector}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">S√©lectionnez un secteur</option>
              <option value="Technologie">Technologie</option>
              <option value="Finance">Finance</option>
              <option value="Sant√©">Sant√©</option>
              <option value="√âducation">√âducation</option>
              <option value="Commerce">Commerce</option>
              <option value="Industrie">Industrie</option>
              <option value="Autre">Autre</option>
            </select>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button 
              type="button"
              onClick={generateCareerPlan}
              disabled={loading || !formData.goal}
              className="w-full bg-gradient-to-r from-blue-600 to-green-600 text-white py-2 px-4 rounded-md hover:from-blue-700 hover:to-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'G√©n√©ration...' : 'G√©n√©rer mon plan de carri√®re'}
            </button>
            <button 
              type="button"
              onClick={generateNegotiationScript}
              disabled={loading || !formData.goal}
              className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white py-2 px-4 rounded-md hover:from-purple-700 hover:to-pink-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'G√©n√©ration...' : 'Script de n√©gociation'}
            </button>
          </div>
        </form>
      </div>

      {/* Affichage des erreurs */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="text-red-700">
            <strong>Erreur :</strong> {error}
          </div>
        </div>
      )}

      {/* R√©sultat */}
      {result && (
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4">Votre r√©sultat</h2>
          
          <div className="space-y-4">
            <div className="text-green-600 bg-green-50 p-4 rounded-md">
              {result.message}
            </div>
            
            {/* Boutons d'ouverture des fen√™tres */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {result.plan && (
                <button
                  onClick={() => setShowCareerPlan(true)}
                  className="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 transition-colors"
                >
                  üìã Voir le plan de carri√®re
                </button>
              )}
              
              {result.script && (
                <button
                  onClick={() => setShowNegotiationScript(true)}
                  className="w-full bg-purple-600 text-white py-3 px-4 rounded-md hover:bg-purple-700 transition-colors"
                >
                  üí¨ Voir le script de n√©gociation
                </button>
              )}
            </div>
            
            <div>
              <h3 className="font-medium mb-2">Recommandations :</h3>
              <ul className="list-disc list-inside space-y-1">
                {result.recommendations.map((rec, index) => (
                  <li key={index} className="text-gray-700">{rec}</li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      )}

      {/* Informations suppl√©mentaires */}
      <div className="bg-blue-50 rounded-lg p-6">
        <h3 className="text-lg font-semibold mb-3">üí° √Ä propos du coaching carri√®re</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
          <div>
            <h4 className="font-medium mb-2">üéØ Objectifs</h4>
            <ul className="space-y-1 text-gray-600">
              <li>‚Ä¢ D√©finir un plan de carri√®re clair</li>
              <li>‚Ä¢ Identifier les comp√©tences √† d√©velopper</li>
              <li>‚Ä¢ Trouver des opportunit√©s de progression</li>
              <li>‚Ä¢ Pr√©parer ses n√©gociations</li>
            </ul>
          </div>
          <div>
            <h4 className="font-medium mb-2">üöÄ Avantages</h4>
            <ul className="space-y-1 text-gray-600">
              <li>‚Ä¢ Analyse personnalis√©e</li>
              <li>‚Ä¢ Recommandations concr√®tes</li>
              <li>‚Ä¢ Scripts de n√©gociation</li>
              <li>‚Ä¢ Suivi de progression</li>
            </ul>
          </div>
        </div>
      </div>

      {/* Fen√™tres modales */}
      {result?.plan && (
        <CareerPlan
          plan={result.plan}
          isOpen={showCareerPlan}
          onClose={() => setShowCareerPlan(false)}
          onSave={handleSaveCareerPlan}
        />
      )}

      {result?.script && (
        <NegotiationScript
          script={result.script}
          isOpen={showNegotiationScript}
          onClose={() => setShowNegotiationScript(false)}
          onSave={handleSaveNegotiationScript}
        />
      )}
    </div>
  );
};

export default WorkingCareerCoaching;
